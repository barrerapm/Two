La siguiente parte del TP abarca la creacion propiamente dicha de los advices, como asi tambien
la creacion de aspectos particulares que ejerciten el uso del framework.

Todos los siguiente puntos son grupales. Es importante destacar que el punto 4.1 es la base para poder
armar todos los demas puntos, aunque seguramente para los siguientes puntos haya que iterar sobre la
solucion y adaptar la solucion del punto 4.1.

Para los grupos que tienen menos de 5 integrantes, pueden descartar tantos puntos (tomando desde el ultimo)
como integrantes falten. Siempre contando desde el final ya que estan ordenados por importancia.

Tener en cuenta que los puntos 4.2, 4.4 y 4.5 deben ser resueltos como usuarios del propio framework.
Esto implica que debe estar bien claro cual es la separacion entre la funcionalidad que provee el
framework y la funcionalidad que agregan los aspectos en particular.

4.1. Advices
  El siguiente paso para tener un framework funcional de aspectos es poder efectivamente interceptar las
llamadas a los metodos. En este punto se pide poder definirle al framework cual es el comportamiento
que se quiere ejecutar, en que momento ha de ejecutarse y que efectivamente el framework intercepte
las llamadas a dichos m ́todos. Los m ́todos a interceptar son los provistos en la parte 1 del TP.

El framework debe permitir 4 puntos de intercepci ́n distintos:

   1. before: El c ́digo provisto se ejecutar ́ antes del m ́todo interceptado.

   2. after: El c ́digo provisto se ejecutar ́ despu ́s del m ́todo interceptado.

   3. instead of: El codigo provisto se ejecutara en vez del metodo interceptado (el metodo original
                  NO sera ejecutado). Se debe proveer alguna forma para poder invocar manualmente al
                  metodo original.

   4. on error: El codigo provisto se ejecutara cuando el metodo interceptado salga con una excepcion.

4.2.     Cache sin estado
  Se pide implementar un aspecto que permita hacer una cache de invocaciones a m ́todos. La idea es qu
si se invoca dos veces un m ́todo con los mismos par ́metros, entonces no hace falta volver a ejecutar
el m ́todo sino que podr ́ guardarse el resultado de la invocaci ́n anterior y devolver directamente.

  Para este punto se asume que el m ́todo no accede al estado del objeto (ya que sino el resultado podra
no depender solamente del valor de los par ́metros sino del estado mutable del objeto).

4.3.    Advices a metodos dinamicos
  Como saben, en Ruby es posible agregar m ́todos din ́micamente. Esto puede ocurrir a ́n luego de que el
framework haya ejecutado la aplicaci ́n de los advices. El framework deber ́, entonces, escuchar
la definici ́n de nuevos m ́todos y aplicarles los advices si correspondiese.

4.4.    Cache con estado
  Inspirados en el aspecto de cache sin estado, se requiere hacer una aspecto nuevo que tenga la misma
funcionalidad pero que adem ́s de comparar los par ́metros, se fije en el estado del objeto. Se asume
para este aspecto que la ejecuci ́n del m ́todo no cambia por el estado de los objetos que se tengan
como atributos. Si se tienen los mismos atributos que una llamada anterior y los mismos par ́metros,
entonces se puede cachear el resultado.

4.5.    Transacciones
  Se quiere crear la funcionalidad de transacciones a nivel de objetos individuales. Para ello se desea
crear un aspecto que intercepte los accessors de un objeto de forma que cuando se invoca un setter no se
escriba el atributo de verdad y cuando se invoca un getter no se lea el atributo de verdad. En cambio,
debera guardarse en paralelo el nuevo estado del objeto (para cada objeto por separado).
Luego se debera poder ejecutar una accion de commit sobre el objeto, en donde se pisan los atributos del
objeto con los valores nuevos, o un rollback del objeto en donde simplemente se descartan los valores
guardados.

  Por otro lado se debera crear un aspecto el cual delimite la transaccion. En estos m ́todos si se
termina por error se ejecutara un rollback sobre el objeto y si termina bien se ejecutara un commit.
